{"version":3,"sources":["logo.svg","components/Headers.js","App.js","components/cardComponent.js","serviceWorker.js","index.js"],"names":["module","exports","Headers","score","topScore","message","className","style","height","fontSize","randomNum","CardComponent","props","key","id","src","image","alt","name","width","onClick","handleImagePress","App","state","characters","console","log","randomNumBetween1and12","setState","shuffleCardPlacement","sort","Math","random","floor","this","map","element","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8kEAAAA,EAAOC,QAAU,IAA0B,kC,iJCE5B,SAASC,EAAT,GAA8C,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,QAE9C,OACI,gCACE,6BAEI,yBAAKC,UAAU,uFAAuFC,MAAO,CAACC,OAAQ,OAAQC,SAAU,KACtI,yBAAKH,UAAU,0BAAf,eACA,yBAAKA,UAAU,sBAAsBD,GACrC,yBAAKC,UAAU,0BAAf,UAAgDH,EAAhD,iBAAqEC,KAI3E,yBAAKE,UAAU,yCACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,eACA,uBAAGA,UAAU,QAAb,wEAIA,oD,ICfVI,E,OCLW,SAASC,EAAcC,GACpC,OACE,yBAAKN,UAAU,0BAA0BO,IAAKD,EAAME,IAClD,yBAAKC,IAAKH,EAAMI,MAAOC,IAAKL,EAAMM,KAAMC,MAAM,QAAQC,QAASR,EAAMS,oB,IDItDC,E,2MAEnBC,MAAQ,CACNpB,MAAO,EACPC,SAAU,EACToB,aACAnB,QAAS,2B,EAIZgB,iBAAmB,SAACP,GAClBW,QAAQC,IAAI,KAAMZ,GAClB,EAAKa,yBAEFjB,IAAcI,GACf,EAAKc,SAAS,CACZvB,QAAS,wBACTF,MAAO,EAAKoB,MAAMpB,MAAQ,IAE5B,EAAK0B,uBACL,EAAKF,2BAEL,EAAKC,SAAS,CACZvB,QAAS,0BACTF,MAAO,IAET,EAAKwB,yBACF,EAAKJ,MAAMpB,MAAQ,EAAKoB,MAAMnB,UAC/B,EAAKwB,SAAS,CACZxB,SAAU,EAAKmB,MAAMpB,U,EAO7B0B,qBAAuB,WACrBL,EAAWM,KAAK,kBAAMC,KAAKC,SAAW,KACtC,EAAKJ,SAAS,CAACJ,gB,EAGjBG,uBAAyB,SAACb,GACxBJ,EAAYqB,KAAKE,MAAsB,EAAhBF,KAAKC,UAAgB,EAC5CP,QAAQC,IAAI,YAAahB,I,wEAMjB,IAAD,OAEP,OACE,yBAAKJ,UAAU,OACb,kBAACJ,EAAD,CAASC,MAAO+B,KAAKX,MAAMpB,MAAOC,SAAU8B,KAAKX,MAAMnB,SAAUC,QAAS6B,KAAKX,MAAMlB,UAGvF,yBAAKC,UAAU,aACf,yBAAKA,UAAU,OACd4B,KAAKX,MAAMC,WAAWW,IAAI,SAAAC,GACzB,OAAO,kBAACzB,EAAD,CAAeK,MAAOoB,EAAQpB,MAAOF,GAAIsB,EAAQtB,GAAII,KAAMkB,EAAQlB,KAAMG,iBAAkB,kBAAM,EAAKA,iBAAiBe,EAAQtB,gB,GA3D7GuB,aEGbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.eb5bc9e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nexport default function Headers({score, topScore, message}) {\n\n    return (\n        <header>\n          <nav>\n            {/* <div class=\"container\"> */}\n              <div className=\"row bg-secondary p-10 text-content-center text-uppercase font-weight-bold text-white\" style={{height: '50px', fontSize: 25}}>\n                <div className=\"col-sm float-left ml-4\">Clicky Game</div>\n                <div className=\"col-sm text-center\">{message}</div>\n                <div className=\"col-sm text-right mr-4\">Score: {score} | Top Score: {topScore}</div>\n              </div>\n            {/* </div> */}\n          </nav>\n          <div className=\"jumbotron jumbotron-fluid text-center\">\n            <div className=\"container\">\n              <h1 className=\"display-4\">Clicky Game</h1>\n              <p className=\"lead\">\n                We all make our choices in life, but in the end our choices make\n                us.\n              </p>\n              <p>- Play if you dare</p>\n            </div>\n          </div>\n        </header>\n    )\n}\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Headers from './components/Headers'\nimport characters from './characters.json'\nimport CardComponent from \"./components/cardComponent\";\n\nlet randomNum;\n\nexport default class App extends Component {\n\n  state = {\n    score: 0,\n    topScore: 0,\n     characters,\n     message: 'Click an image to begin'\n  }\n\n\n  handleImagePress = (id) => {\n    console.log('id', id);\n    this.randomNumBetween1and12()\n\n    if(randomNum === id){\n      this.setState({\n        message: 'you guessed correctly',\n        score: this.state.score + 1\n      })\n      this.shuffleCardPlacement();\n      this.randomNumBetween1and12();\n    }else{\n      this.setState({\n        message: 'you guessed incorrectly',\n        score: 0\n      })\n      this.randomNumBetween1and12();\n      if(this.state.score > this.state.topScore){\n        this.setState({\n          topScore: this.state.score\n        })\n      }\n    }\n\n  }\n\n  shuffleCardPlacement = () => {\n    characters.sort(() => Math.random() - 0.5);\n    this.setState({characters})\n  }\n\n  randomNumBetween1and12 = (id) => {\n    randomNum = Math.floor(Math.random() * 1) + 1;\n    console.log('randomNum', randomNum);\n\n  }\n\n\n\n  render() {\n\n    return (\n      <div className=\"app\">\n        <Headers score={this.state.score} topScore={this.state.topScore} message={this.state.message}/>\n\n      \n      <div className=\"container\">\n      <div className=\"row\">\n      {this.state.characters.map(element => {\n        return <CardComponent image={element.image} id={element.id} name={element.name} handleImagePress={() => this.handleImagePress(element.id)}/>\n      })}\n         </div>\n\n        </div>\n\n      \n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default function CardComponent(props) {\n  return (\n    <div className=\"col-sm-3 imageContainer\" key={props.id} >\n      <img src={props.image} alt={props.name} width=\"200px\" onClick={props.handleImagePress}/>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}